export function consoleLog(e) { console.log(e) } import { _addPoint as e, _addPointTooltip as o, _addPointCustomSymbology as t, _addPointCustomSymbologyAndTooltip as n, _addPointIcon as l, _addPointIconAndTooltip as a, _addPointFromArrayToMap as r, _deleteAllPointsFromArray as s, _setPointFromArrayCurrentSymbol as i, _addLabelPointFromArrayToMap as p, _deleteAllLabels as d } from "./geometry/point.js"; import { _initializationOfRendering as c, _settingsOfRendering as m, _settingsOfTooltips as g, _resetOfRendering as u, _emptyStreamPointCollection as y, _addPointToCollection as v, _addPointsToCollection as f, _addPointsOnType as C, _clearAllPointsCollection as x, _clearPointsByIdsCollection as M, _movePointFromCollection as h, _pointsLayersGroup as O, _updateAttribute as b } from "./geometry/points.js"; import { _addPolygonsArrayToMap as A, _setCurrentSymbol as $, _deleteAllPolygons as S } from "./geometry/polygons.js"; import { _addMeasureArrayToMap as k, _addMeasureText as P, _addMeasureStyle as E, _addMeasureAnchor as T, _deleteAll as j } from "./geometry/polylines.js"; import { initBasemapLayers as Z } from "./layers/basemap.js"; import { _setGeometricLayersVisibilityScale as w } from "./layers/geometricLayers.js"; import { _addFromGeoJSONObjectArray as N, _addFromGeoJSONObjectClass as z, _geojsonLayersGroup as B, _addFromGeoJSON as R, _addFromGeoJSONString as V } from "./geojson/fromObject.js"; let map = null, layers_control = null, LeafletCore = null, config = { api: { src: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.js", href: "https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" } }, _dotNetObjRef = null; export const MapCoreInitialization = (e, o) => { _dotNetObjRef = e; let t = document.createElement("script"); t.src = config.api.src, t.async = !0; let n = document.createElement("link"); n.href = config.api.href, n.rel = "stylesheet", document.body.appendChild(n), document.body.appendChild(t); let l = void 0 === o ? 0 : void 0 === o.location || null === o.location ? 0 : void 0 === o.location.longitude ? 0 : o.location.longitude, a = void 0 === o ? 0 : void 0 === o.location || null === o.location ? 0 : void 0 === o.location.latitude ? 0 : o.location.latitude, r = {}; null != o && void 0 !== o.options && null !== o.options && void 0 !== o.options.interactionOptions && null !== o.options.interactionOptions && (r = o.options.interactionOptions), t.onload = () => { LeafletCore = L, null !== (layers_control = _layers_control(map = L.map(o.__mapid, { doubleClickZoom: void 0 === r.doubleClickZoom || r.doubleClickZoom, shiftBoxZoom: void 0 === r.shiftBoxZoom || r.shiftBoxZoom, dragging: void 0 === r.dragging || r.dragging, trackResize: void 0 === r.trackResize || r.trackResize }).on("load", function (o) { let t = o.target, n = t.getBounds(); e.invokeMethodAsync("onAfterMapLoaded", { zoomLevel: t._zoom, centerOfView: { latitude: t._lastCenter.lat, longitude: t._lastCenter.lng }, bounds: { northEast: { latitude: n._northEast.lat, longitude: n._northEast.lng }, southWest: { latitude: n._southWest.lat, longitude: n._southWest.lng } } }) }).setView({ lon: l, lat: a }, o.zoom_level))) && Z(map, !1, o.basemap, layers_control), null !== o.map_scale && void 0 !== o.map_scale.has && !0 === o.map_scale.has && L.control.scale({ metric: o.map_scale.meters, imperial: o.map_scale.miles }).addTo(map), _setOnClickMapEvent(e), _setOnDoubleClickMapEvent(e), _setOnMouseDownMapEvent(e), _setOnMouseUpMapEvent(e), _setOnZoomLevelsChangeEvent(e), _setOnMouseMoveEvent(e) }, t.onerror = () => { console.warn("Error occurred while loading Leaflet script") } }; export const _setOnClickMapEvent = e => { map.on("click", o => { e.invokeMethodAsync("onClickingMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) }) }; export const _setOnDoubleClickMapEvent = e => { map.on("dblclick", o => { e.invokeMethodAsync("onDoubleClickingMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) }) }; export const _setOnMouseDownMapEvent = e => { map.on("mousedown", o => { e.invokeMethodAsync("onMouseDownMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) }) }; export const _setOnMouseUpMapEvent = e => { map.on("mouseup", o => { e.invokeMethodAsync("onMouseUpMap", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) }) }; export const _setOnZoomLevelsChangeEvent = e => { map.on("zoomend", o => { e.invokeMethodAsync("onZoomLevelEndChange", { centerOfView: { latitude: o.sourceTarget._lastCenter.lat, longitude: o.sourceTarget._lastCenter.lng }, zoomLevel: o.sourceTarget._zoom }) }) }; export const _setOnMouseMoveEvent = e => { map.on("mousemove", o => { e.invokeMethodAsync("onMouseMove", { location: { latitude: o.latlng.lat, longitude: o.latlng.lng } }) }) }; let _layers_control = e => L.control.layers(null, null, { collapsed: !0 }).addTo(e); export const setGeometricLayersVisibilityScale = e => { w(O, e, map, LeafletCore) }; export const setZoom = e => { map.setZoom(e) }; export const setCenterOfView = e => { let o = LeafletCore.latLng(e.latitude, e.longitude); map.setView(o) }; export const setBoundsOfView = e => { let o = LeafletCore.latLngBounds(LeafletCore.latLng(e.northEast.latitude, e.northEast.longitude), LeafletCore.latLng(e.southWest.latitude, e.southWest.longitude)); map.fitBounds(o) }; export const setMinZoomLevel = e => { map.setMinZoom(e) }; export const setMaxZoomLevel = e => { map.setMaxZoom(e) }; export const addPoint = o => { e(o, map, LeafletCore) }; export const addPointTooltip = e => { o(e, map, LeafletCore) }; export const addPointCustomSymbology = e => { t(e, map, LeafletCore) }; export const addPointCustomSymbologyAndTooltip = e => { n(e, map, LeafletCore) }; export const addPointIcon = e => { l(e, map, LeafletCore) }; export const addPointIconAndTooltip = e => { addPointIconAndTooltip(e, map, LeafletCore) }; export const addPointFromArrayToMap = e => { r(e, map, LeafletCore) }; export const deleteAllPointsFromArray = () => { s(map, LeafletCore) }; export const setPointFromArrayCurrentSymbol = e => { i(e) }; export const addLabelPointFromArrayToMap = e => { p(e, map, LeafletCore) }; export const deleteAllLabels = () => { d(map) }; export const initializationOfRendering = e => { c(e) }; export const settingsOfRendering = e => { let o = m(e, LeafletCore); null != o && onAppearanceChange(o.symbols) }; export const onAppearanceChange = e => { _dotNetObjRef.invokeMethodAsync("onStreamPointAppearanceChange", e) }; export const settingsOfTooltips = e => { g(e) }; export const resetOfRendering = () => { u() }; export const addPointToStreamCollection = e => { v(e, map, LeafletCore) }; export const addPointsToStreamCollection = e => { let o = f(e, !1, map, LeafletCore); onPointStreamsAdd(o.renderingPointCollection), layers_control.addOverlay(o.layer, o.layer.type) }; export const onPointStreamsAdd = e => { _dotNetObjRef.invokeMethodAsync("onPointStreamAdd", []) }; export const addNewPointsToStreamCollection = e => { f(e, !0, map, LeafletCore) }; export const addPointsOnType = e => { C(e, !1, map, LeafletCore) }; export const addNewCollectionPointsOnType = e => { C(e, !0, map, LeafletCore) }; export const emptyStreamPointCollection = () => { y() }; export const updateAttribute = e => { b(e, map, LeafletCore) }; export const addPolygonsArrayToMap = e => { A(e, map, LeafletCore) }; export const setCurrentSymbol = e => { $(e) }; export const deleteAllPolygons = () => { S(map) }; export const addMeasureText = e => { P(e) }; export const addMeasureStyle = e => { E(e) }; export const addMeasureAnchor = e => { T(e) }; export const deleteAll = () => { j(map) }; export const addMeasureLineFromArray = e => { k(e, map, LeafletCore) }; export const clearAllStreamCollection = () => { x(map) }; export const clearPointsByIdsStreamCollection = e => { M(e, map) }; export const movePointFromStreamCollection = e => { h(e, map, LeafletCore) }; export const setExtent = e => { let o = LeafletCore.latLng(e.latmin, e.lngmin), t = LeafletCore.latLng(e.latmax, e.lngmax), n = L.latLngBounds(o, t); map.fitBounds(n) }; export const addFromGeoJSONObjectArray = e => { N(e, map, LeafletCore) }; export const addFromGeoJSONObjectClass = e => { let o = R(e, map, LeafletCore); void 0 !== o && void 0 !== o.overlay && null !== o.overlay && void 0 !== o.overlay.name && void 0 !== o.overlay.layer && layers_control.addOverlay(o.overlay.layer, o.overlay.name), setGeoJSONLayersVisibilityScale(o.settings.visibility, o.settings.shapes) }; export const addFromGeoJSONString = e => { let o = V(e, map, LeafletCore); void 0 !== o && void 0 !== o.overlay && null !== o.overlay && void 0 !== o.overlay.name && void 0 !== o.overlay.layer && layers_control.addOverlay(o.overlay.layer, o.overlay.name), setGeoJSONLayersVisibilityScale(o.settings.visibility, o.settings.shapes) }; export const setGeoJSONLayersVisibilityScale = (e, o) => { w(o, e, map, LeafletCore) };